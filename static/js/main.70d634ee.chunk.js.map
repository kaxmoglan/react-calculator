{"version":3,"sources":["App.js","index.js"],"names":["App","buttons","value","content","id","className","useState","input","setInput","formula","setFormula","equals","setEquals","result","setResult","setValue","operatorRegExp","endsWithOperator","useEffect","cleanedFormula","test","slice","answer","Math","round","Function","toString","handleButtons","length","document","onkeydown","e","key","handleClear","handleClick","currentTarget","includes","Number","isNaN","match","concat","x","parseFloat","y","map","btn","idx","onClick","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.70d634ee.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  // DATA\n  const buttons = [\n    {\n      value: \"init\",\n      content: \"C\",\n      id: \"clear\",\n      className: \"number\",\n    },\n    {\n      value: \"%\",\n      content: <i className=\"fas fa-percent\"></i>,\n      id: \"percent\",\n      className: \"operator\",\n    },\n    {\n      value: \"/\",\n      content: <i className=\"fas fa-divide\"></i>,\n      id: \"divide\",\n      className: \"operator\",\n    },\n    {\n      value: \"7\",\n      content: \"7\",\n      id: \"seven\",\n      className: \"number\",\n    },\n    {\n      value: \"8\",\n      content: \"8\",\n      id: \"eight\",\n      className: \"number\",\n    },\n    {\n      value: \"9\",\n      content: \"9\",\n      id: \"nine\",\n      className: \"number\",\n    },\n    {\n      value: \"*\",\n      content: <i className=\"fas fa-times\"></i>,\n      id: \"multiply\",\n      className: \"operator\",\n    },\n    {\n      value: \"4\",\n      content: \"4\",\n      id: \"four\",\n      className: \"number\",\n    },\n    {\n      value: \"5\",\n      content: \"5\",\n      id: \"five\",\n      className: \"number\",\n    },\n    {\n      value: \"6\",\n      content: \"6\",\n      id: \"six\",\n      className: \"number\",\n    },\n    {\n      value: \"-\",\n      content: <i className=\"fas fa-minus\"></i>,\n      id: \"subtract\",\n      className: \"operator\",\n    },\n    {\n      value: \"1\",\n      content: \"1\",\n      id: \"one\",\n      className: \"number\",\n    },\n    {\n      value: \"2\",\n      content: \"2\",\n      id: \"two\",\n      className: \"number\",\n    },\n    {\n      value: \"3\",\n      content: \"3\",\n      id: \"three\",\n      className: \"number\",\n    },\n    {\n      value: \"+\",\n      content: <i className=\"fas fa-plus\"></i>,\n      id: \"add\",\n      className: \"operator\",\n    },\n    {\n      value: \"0\",\n      content: \"0\",\n      id: \"zero\",\n      className: \"number\",\n    },\n    {\n      value: \".\",\n      content: \".\",\n      id: \"decimal\",\n      className: \"number\",\n    },\n    {\n      value: \"=\",\n      content: <i className=\"fas fa-equals\"></i>,\n      id: \"equals\",\n      className: \"operator\",\n    },\n  ];\n\n  // STATE\n  const [input, setInput] = useState(\"0\");\n  const [formula, setFormula] = useState(\"\");\n  const [equals, setEquals] = useState(false);\n  const [result, setResult] = useState();\n  const [value, setValue] = useState(\"0\");\n\n  // OPERATOR REGEXPs\n  const operatorRegExp = /[*+/-]/;\n  const endsWithOperator = /[*+-/]$/;\n\n  // USE EFFECTS\n  // evaluate equals on equals state change\n  useEffect(() => {\n    if (equals) {\n      let cleanedFormula = formula;\n      while (endsWithOperator.test(cleanedFormula)) {\n        cleanedFormula = cleanedFormula.slice(0, -1);\n      }\n\n      function solve(sum) {\n        return new Function(\"return \" + sum)();\n      }\n      const answer =\n        Math.round(1000000000 * solve(cleanedFormula)) / 1000000000;\n      setResult(answer);\n      setFormula(`${cleanedFormula} = ${answer}`);\n      setInput(answer.toString());\n    }\n  }, [equals]);\n\n  // run whenever value state changes\n  useEffect(() => {\n    handleButtons(value);\n  }, [value]);\n\n  useEffect(() => {\n    if (input.length > 11) {\n      setInput(\"MAX LIMIT\");\n    }\n  }, [input]);\n\n  // KEYBOARD FUNCTIONALITY\n  useEffect(() => {\n    document.onkeydown = (e) => {\n      const keyPress = e.key;\n      switch (keyPress) {\n        case \"Enter\":\n          setValue(\"=\");\n          break;\n        case \"c\":\n          setValue(\"init\");\n          break;\n        case \" \":\n          setValue(\"0\");\n          break;\n        case \"x\":\n          setValue(\"*\");\n          break;\n        default:\n          setValue(e.key);\n          break;\n      }\n    };\n  });\n\n  // HANDLERS\n  const handleClear = () => {\n    setInput(\"0\");\n    setFormula(\"\");\n    setEquals(false);\n  };\n\n  const handleClick = (e) => {\n    setValue(e.currentTarget.value);\n  };\n\n  const handleButtons = (value) => {\n    if (input.length > 11) {\n      setInput(\"MAX LIMIT\");\n      return;\n    }\n    if (input.includes(\"LIMIT\") && value !== \"init\") {\n      return;\n    }\n    if (!Number.isNaN(Number(value))) {\n      // IF NUMBER\n      if (equals) {\n        handleClear();\n        setInput(value);\n        setValue(\"\");\n      } else if (input.match(operatorRegExp)) {\n        setFormula(formula.concat(` ${input}`));\n        setInput(value);\n        setValue(\"\");\n      } else if (input === \"0\" && value === \"0\") {\n        return;\n      } else if (input === \"0\") {\n        setInput(value);\n        setValue(\"\");\n      } else {\n        setInput(input.concat(value));\n        setValue(\"\");\n      }\n    } else if (value.match(operatorRegExp)) {\n      // ELSE IF OPERATOR\n      if (equals) {\n        setFormula(result.toString());\n        setInput(value);\n        setEquals(false);\n      } else {\n        if (input === \"0\" && value === \"-\") {\n          if (value === \"-\") {\n            setInput(value);\n          } else return;\n        } else if (\n          input.match(/[*+/]/) &&\n          input.length === 1 &&\n          value === \"-\"\n        ) {\n          setInput(input.concat(value));\n        } else if (!input.match(operatorRegExp)) {\n          setFormula(formula.concat(` ${input}`));\n          setInput(value);\n        } else {\n          setInput(value);\n        }\n      }\n    } else {\n      switch (value) {\n        case \"init\":\n          handleClear();\n          break;\n        case \".\":\n          if (!input.includes(\".\")) {\n            setInput(input.concat(value));\n          }\n          break;\n        case \"=\":\n          if (!equals) {\n            setFormula(formula.concat(` ${input}`));\n            setEquals(true);\n          }\n          break;\n        case \"%\":\n          const x = parseFloat(input);\n          const y = (Math.round(1000000 * (x / 100)) / 1000000).toString();\n          setInput(y);\n          break;\n        default:\n          return;\n      }\n      return;\n    }\n    return;\n  };\n\n  return (\n    <>\n      <h1>Calcleator</h1>\n      <div id=\"calculator\">\n        <div id=\"display\">\n          <p id=\"equation\">{formula}</p>\n          <p id=\"current\">{input}</p>\n        </div>\n        <div className=\"btn-section\">\n          {buttons.map((btn, idx) => (\n            <button\n              onClick={handleClick}\n              id={btn.id}\n              className={btn.className}\n              key={idx}\n              value={btn.value}\n            >\n              {btn.content}\n            </button>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}